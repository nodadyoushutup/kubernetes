apiVersion: batch/v1
kind: CronJob
metadata:
  name: radarr-cronjob-snapshot
  namespace: radarr
spec:
  schedule: "0 0 * * *"  # This schedule runs the job once a day at midnight
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      backoffLimit: 0
      template:
        spec:
          serviceAccountName: snapshot-sa
          containers:
          - name: snapshot
            image: bitnami/kubectl:latest
            command:
            - "/bin/sh"
            - "-c"
            - |
              # Step 2: Delete existing assets
              # kubectl patch job radarr-tarcopy-job -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete job radarr-tarcopy-job -n radarr --ignore-not-found
              kubectl patch volumesnapshot radarr-config-snapshot -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete volumesnapshot radarr-config-snapshot -n radarr --ignore-not-found
              kubectl patch pvc radarr-config-snapshot-pvc -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete pvc radarr-config-snapshot-pvc -n radarr --ignore-not-found
              
              # Step 1: Create new assets
              ### VolumeSnapshot ###
              kubectl apply -f - <<EOF
              apiVersion: snapshot.storage.k8s.io/v1
              kind: VolumeSnapshot
              metadata:
                name: radarr-config-snapshot
                namespace: radarr
              spec:
                volumeSnapshotClassName: rook-cephfs-snapshot-class
                source:
                  persistentVolumeClaimName: radarr-config-pvc
              EOF
              while [ "$(kubectl get volumesnapshot radarr-config-snapshot -n radarr -o jsonpath='{.status.readyToUse}')" != "true" ]; do
                echo "Waiting for the VolumeSnapshot to be ready..."
                sleep 10
              done
              while [ "$(kubectl get volumesnapshot radarr-config-snapshot -n radarr -o jsonpath='{.status.readyToUse}')" != "true" ]; do
                echo "Waiting for the VolumeSnapshot to be ready..."
                sleep 10
              done

              ### PVC ###
              kubectl apply -f - <<EOF
              apiVersion: v1
              kind: PersistentVolumeClaim
              metadata:
                name: radarr-config-snapshot-pvc
                namespace: radarr
              spec:
                accessModes:
                - ReadWriteMany
                resources:
                  requests:
                    storage: 50Gi
                storageClassName: rook-cephfs
                dataSource:
                  name: radarr-config-snapshot
                  kind: VolumeSnapshot
                  apiGroup: snapshot.storage.k8s.io
              EOF
              while [ "$(kubectl get pvc radarr-config-snapshot-pvc -n radarr -o jsonpath='{.status.phase}')" != "Bound" ]; do
                echo "Waiting for the PVC to be bound..."
                sleep 10
              done

              ### JOB ###
              kubectl apply -f - <<EOF
              apiVersion: batch/v1
              kind: Job
              metadata:
                name: radarr-tarcopy-job
                namespace: radarr
              spec:
                template:
                  spec:
                    containers:
                    - name: tarcopy
                      image: busybox
                      command: ["sh", "/scripts/tarcopy.sh"]
                      securityContext:
                        runAsUser: 568
                      volumeMounts:
                      - name: pvc
                        mountPath: /pvc
                      - name: nfs
                        mountPath: /nfs
                      - name: script
                        mountPath: /scripts
                    restartPolicy: OnFailure
                    volumes:
                    - name: pvc
                      persistentVolumeClaim:
                        claimName: radarr-config-snapshot-pvc
                    - name: nfs
                      nfs:
                        server: 192.168.0.100
                        path: /mnt/epool/tarshots/radarr
                    - name: script
                      configMap:
                        name: radarr-cm-tarcopy
                        defaultMode: 0755
              EOF

              # Step 2: Delete existing assets
              # kubectl patch job radarr-tarcopy-job -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete job radarr-tarcopy-job -n radarr --ignore-not-found
              kubectl patch volumesnapshot radarr-config-snapshot -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete volumesnapshot radarr-config-snapshot -n radarr --ignore-not-found
              kubectl patch pvc radarr-config-snapshot-pvc -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'
              kubectl delete pvc radarr-config-snapshot-pvc -n radarr --ignore-not-found

          restartPolicy: OnFailure
