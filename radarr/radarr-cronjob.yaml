# apiVersion: batch/v1
# kind: CronJob
# metadata:
#   name: radarr-cronjob-tarcopy
#   namespace: radarr
# spec:
#   # schedule: "0 * * * *"
#   schedule: "*/5 * * * *"
#   successfulJobsHistoryLimit: 3
#   failedJobsHistoryLimit: 1
#   jobTemplate:
#     spec:
#       template:
#         spec:
#           containers:
#           - name: tarcopy
#             image: busybox
#             command: ["sh", "/scripts/tarcopy.sh"]
#             securityContext:
#               runAsUser: 568
#             volumeMounts:
#             - name: pvc
#               mountPath: /pvc
#             - name: nfs
#               mountPath: /nfs
#             - name: script
#               mountPath: /scripts
#           restartPolicy: OnFailure
#           volumes:
#           - name: pvc
#             persistentVolumeClaim:
#               claimName: radarr-config-snapshot-pvc
#           - name: nfs
#             nfs:
#               server: 192.168.0.100
#               path: /mnt/epool/tarshots/radarr
#           - name: script
#             configMap:
#               name: radarr-cm-tarcopy
#               defaultMode: 0755
apiVersion: batch/v1
kind: CronJob
metadata:
  name: radarr-cronjob-snapshot
  namespace: radarr
spec:
  schedule: "0 0 * * *"  # This schedule runs the job once a day at midnight
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: snapshot-sa
          containers:
          - name: snapshot
            image: bitnami/kubectl:latest
            command:
            - "/bin/sh"
            - "-c"
            - |
              # Step 1: Delete the current VolumeSnapshot
              kubectl delete volumesnapshot radarr-config-snapshot -n radarr --ignore-not-found --force

              # Argo CD auto reploys asset

              # Step 2: Wait for the new VolumeSnapshot to be ready
              while [ "$(kubectl get volumesnapshot radarr-config-snapshot -n radarr -o jsonpath='{.status.readyToUse}')" != "true" ]; do
                echo "Waiting for the VolumeSnapshot to be ready..."
                sleep 10
              done

              # Step 3: Delete the current PVC created from the snapshot
              kubectl delete pvc radarr-config-snapshot-pvc -n radarr --ignore-not-found --force

              # Argo CD auto reploys asset

              # Step 4: Wait for the new PVC to be created by ArgoCD
              while [ "$(kubectl get pvc radarr-config-snapshot-pvc -n radarr -o jsonpath='{.status.phase}')" != "Bound" ]; do
                echo "Waiting for the PVC to be bound..."
                sleep 10
              done

          restartPolicy: OnFailure
