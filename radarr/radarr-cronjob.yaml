apiVersion: batch/v1
kind: CronJob
metadata:
  name: radarr-cronjob-snapshot
  namespace: radarr
spec:
  schedule: "0 0 * * *"  # This schedule runs the job once a day at midnight
  successfulJobsHistoryLimit: 1
  failedJobsHistoryLimit: 1
  jobTemplate:
    spec:
      template:
        spec:
          serviceAccountName: snapshot-sa
          containers:
          - name: snapshot
            image: bitnami/kubectl:latest
            command:
            - "/bin/sh"
            - "-c"
            - |
              # Step 1: Delete the current VolumeSnapshot
              kubectl delete volumesnapshot radarr-config-snapshot -n radarr --ignore-not-found --force
              kubectl patch volumesnapshot radarr-config-snapshot -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'

              # Argo CD auto reploys asset

              # Step 2: Wait for the new VolumeSnapshot to be ready
              while [ "$(kubectl get volumesnapshot radarr-config-snapshot -n radarr -o jsonpath='{.status.readyToUse}')" != "true" ]; do
                echo "Waiting for the VolumeSnapshot to be ready..."
                sleep 10
              done

              # Step 3: Delete the current PVC created from the snapshot
              kubectl delete pvc radarr-config-snapshot-pvc -n radarr --ignore-not-found --force
              kubectl patch pvc radarr-config-snapshot-pvc -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'

              # Argo CD auto reploys asset

              # Step 4: Wait for the new PVC to be created by ArgoCD
              while [ "$(kubectl get pvc radarr-config-snapshot-pvc -n radarr -o jsonpath='{.status.phase}')" != "Bound" ]; do
                echo "Waiting for the PVC to be bound..."
                sleep 10
              done

              # Step 5: Delete the current PVC created from the snapshot
              kubectl delete job radarr-tarcopy-job -n radarr --ignore-not-found --force
              kubectl patch job radarr-tarcopy-job -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]'

              # Argo CD auto reploys asset

          restartPolicy: OnFailure
