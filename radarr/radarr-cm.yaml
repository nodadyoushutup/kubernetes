apiVersion: v1
kind: ConfigMap
metadata:
  name: radarr-cm
  namespace: radarr
data:
  tarcopy.sh: |
    #!/bin/sh
    echo "Starting job at $(date)"
    tar -czf /nfs/radarr_backup_$(date +%Y_%m_%d_%H_%M_%S).tar.gz /pvc
    echo "Job completed at $(date)"
  init-pvc-bound.sh: |
    #!/bin/sh
    echo "Waiting for PVC to be bound..."
    until [ "$(kubectl get pvc radarr-pvc -n radarr -o jsonpath='{.status.phase}')" = "Bound" ]; do
      echo "PVC not bound yet. Waiting..."
      sleep 2
    done
    echo "PVC is bound."
  radarr-volumesnapshot-tarshot.yaml: |
    apiVersion: snapshot.storage.k8s.io/v1
    kind: VolumeSnapshot
    metadata:
      name: radarr-volumesnapshot-tarshot
      namespace: radarr
    spec:
      volumeSnapshotClassName: rook-cephfs-snapshot-class
      source:
        persistentVolumeClaimName: radarr-pvc
  radarr-pvc-tarshot.yaml: |
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: radarr-pvc-tarshot
      namespace: radarr
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 100Gi
      storageClassName: rook-cephfs
      dataSource:
        name: radarr-volumesnapshot-tarshot
        kind: VolumeSnapshot
        apiGroup: snapshot.storage.k8s.io
  radarr-job-tarshot.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: radarr-job-tarshot
      namespace: radarr
    spec:
      template:
        spec:
          containers:
          - name: tarcopy
            image: busybox
            command: ["sh", "/scripts/tarcopy.sh"]
            securityContext:
              runAsUser: 568
              runAsGroup: 568
            volumeMounts:
            - name: pvc
              mountPath: /pvc
            - name: nfs
              mountPath: /nfs
            - name: script
              mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
          - name: pvc
            persistentVolumeClaim:
              claimName: radarr-pvc-tarshot
          - name: nfs
            nfs:
              server: 192.168.0.100
              path: /mnt/epool/tarshot/radarr
          - name: script
            configMap:
              name: radarr-cm
              defaultMode: 0755
  tarshot.sh: |
    #!/bin/sh
    set -e

    export NAMESPACE='radarr'

    log() {
      echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
    }

    delete_pvc() {
      local pvc_name=$1
      local namespace=$2

      if kubectl get pvc "$pvc_name" -n "$namespace" &> /dev/null; then
        log "Deleting PVC $pvc_name"
        kubectl delete pvc "$pvc_name" -n "$namespace" --ignore-not-found && log "PVC $pvc_name deleted"
      else
        log "PVC $pvc_name not found"
      fi
    }

    delete_volumesnapshot() {
      local volumesnapshot_name=$1
      local namespace=$2

      if kubectl get volumesnapshot "$volumesnapshot_name" -n "$namespace" &> /dev/null; then
        log "Deleting VolumeSnapshot $volumesnapshot_name"
        kubectl delete volumesnapshot "$volumesnapshot_name" -n "$namespace" --ignore-not-found && log "VolumeSnapshot $volumesnapshot_name deleted"
      else
        log "VolumeSnapshot $volumesnapshot_name not found"
      fi
    }

    log "Starting backup job..."

    log "Purging old assets (if they exist)"
    delete_pvc "radarr-pvc-tarshot" "$NAMESPACE"
    delete_volumesnapshot "radarr-volumesnapshot-tarshot" "$NAMESPACE"

    # Step 1: Create new assets
    ### VolumeSnapshot ###
    log "Applying VolumeSnapshot configuration" && kubectl apply -f /scripts/radarr-volumesnapshot-tarshot.yaml
    while [ "$(kubectl get volumesnapshot radarr-volumesnapshot-tarshot -n radarr -o jsonpath='{.status.readyToUse}')" != "true" ]; do
      log "Waiting for the VolumeSnapshot to be ready..."
      sleep 10
    done

    ### PVC ###
    log "Applying PVC configuration" && kubectl apply -f /scripts/radarr-pvc-tarshot.yaml
    while [ "$(kubectl get pvc radarr-pvc-tarshot -n radarr -o jsonpath='{.status.phase}')" != "Bound" ]; do
      log "Waiting for the PVC to be bound..."
      sleep 10
    done

    ### JOB ###
    log "Applying Job configuration" && kubectl apply -f /scripts/radarr-job-tarshot.yaml
    while [ "$(kubectl get job radarr-job-tarshot -n radarr -o jsonpath='{.status.succeeded}')" != "1" ]; do
      log "Waiting for the Job to complete..."
      sleep 10
    done

    log "Backup job completed"

    # Step 2: Delete existing assets
    log "Removing finalizers from VolumeSnapshot"
    kubectl patch volumesnapshot radarr-volumesnapshot-tarshot -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from VolumeSnapshot"
    log "Removing finalizers from PVC"
    kubectl patch pvc radarr-pvc-tarshot -n radarr --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from PVC"
    log "Deleting Job"
    kubectl delete job radarr-job-tarshot -n radarr --ignore-not-found && log "Job deleted"
    # log "Deleting VolumeSnapshot"
    # kubectl delete volumesnapshot radarr-volumesnapshot-tarshot -n radarr --ignore-not-found && log "VolumeSnapshot deleted"

    delete_volumesnapshot "radarr-volumesnapshot-tarshot" "$NAMESPACE"
    delete_pvc "radarr-pvc-tarshot" "$NAMESPACE"

    log "Assets cleaned up"
