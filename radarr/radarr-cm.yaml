apiVersion: v1
kind: ConfigMap
metadata:
  name: radarr-cm
  namespace: radarr
data:
  tarcopy.sh: |
    #!/bin/sh
    echo "Starting job at $(date)"
    tar -czf /nfs/radarr_backup_$(date +%Y_%m_%d_%H_%M_%S).tar.gz /pvc
    echo "Job completed at $(date)"
  init-pvc-bound.sh: |
    #!/bin/sh
    echo "Waiting for PVC to be bound..."
    until [ "$(kubectl get pvc radarr-pvc -n radarr -o jsonpath='{.status.phase}')" = "Bound" ]; do
      echo "PVC not bound yet. Waiting..."
      sleep 2
    done
    echo "PVC is bound."
  radarr-volumesnapshot-tarshot.yaml: |
    apiVersion: snapshot.storage.k8s.io/v1
    kind: VolumeSnapshot
    metadata:
      name: radarr-volumesnapshot-tarshot
      namespace: radarr
    spec:
      volumeSnapshotClassName: rook-cephfs-snapshot-class
      source:
        persistentVolumeClaimName: radarr-pvc
  radarr-pvc-tarshot.yaml: |
    apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      name: radarr-pvc-tarshot
      namespace: radarr
    spec:
      accessModes:
      - ReadWriteMany
      resources:
        requests:
          storage: 100Gi
      storageClassName: rook-cephfs
      dataSource:
        name: radarr-volumesnapshot-tarshot
        kind: VolumeSnapshot
        apiGroup: snapshot.storage.k8s.io
  radarr-job-tarshot.yaml: |
    apiVersion: batch/v1
    kind: Job
    metadata:
      name: radarr-job-tarshot
      namespace: radarr
    spec:
      template:
        spec:
          containers:
          - name: tarcopy
            image: busybox
            command: ["sh", "/scripts/tarcopy.sh"]
            securityContext:
              runAsUser: 568
              runAsGroup: 568
            volumeMounts:
            - name: pvc
              mountPath: /pvc
            - name: nfs
              mountPath: /nfs
            - name: script
              mountPath: /scripts
          restartPolicy: OnFailure
          volumes:
          - name: pvc
            persistentVolumeClaim:
              claimName: radarr-pvc-tarshot
          - name: nfs
            nfs:
              server: 192.168.0.100
              path: /mnt/epool/tarshot/radarr
          - name: script
            configMap:
              name: radarr-cm
              defaultMode: 0755
  tarshot_delete_pvc.sh: |
    #!/bin/sh
    delete_pvc() {
      local pvc_name=$1
      local namespace=$2

      if kubectl get pvc "$pvc_name" -n "$namespace" &> /dev/null; then
        log "Removing finalizers from PVC"
        kubectl patch pvc ${NAMESPACE}-pvc-tarshot -n ${NAMESPACE} --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from PVC"
        sleep 1
        log "Deleting PVC $pvc_name"
        kubectl delete pvc "$pvc_name" -n "$namespace" --ignore-not-found && log "PVC $pvc_name deleted"
      else
        log "PVC $pvc_name not found" &> /dev/null
      fi
    }

  tarshot.sh: |
    #!/bin/sh
    set -e

    export NAMESPACE='radarr'

    log() {
      echo "$(date +'%Y-%m-%d %H:%M:%S') - $1"
    }

    
    ls -la /scripts
    source /scripts/tarshot_delete_pvc.sh

    # delete_pvc() {
    #   local pvc_name=$1
    #   local namespace=$2

    #   if kubectl get pvc "$pvc_name" -n "$namespace" &> /dev/null; then
    #     log "Removing finalizers from PVC"
    #     kubectl patch pvc ${NAMESPACE}-pvc-tarshot -n ${NAMESPACE} --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from PVC"
    #     sleep 1
    #     log "Deleting PVC $pvc_name"
    #     kubectl delete pvc "$pvc_name" -n "$namespace" --ignore-not-found && log "PVC $pvc_name deleted"
    #   else
    #     log "PVC $pvc_name not found" &> /dev/null
    #   fi
    # }

    # delete_volumesnapshot() {
    #   local volumesnapshot_name=$1
    #   local namespace=$2

    #   if kubectl get volumesnapshot "$volumesnapshot_name" -n "$namespace" &> /dev/null; then
    #     log "Removing finalizers from VolumeSnapshot"
    #     kubectl patch volumesnapshot ${NAMESPACE}-volumesnapshot-tarshot -n ${NAMESPACE} --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from VolumeSnapshot"
    #     sleep 1
    #     log "Deleting VolumeSnapshot $volumesnapshot_name"
    #     kubectl delete volumesnapshot "$volumesnapshot_name" -n "$namespace" --ignore-not-found && log "VolumeSnapshot $volumesnapshot_name deleted"
    #   else
    #     log "VolumeSnapshot $volumesnapshot_name not found"
    #   fi
    # }

    # delete_job() {
    #   local job_name=$1
    #   local namespace=$2

    #   if kubectl get job "$job_name" -n "$namespace" &> /dev/null; then
    #     log "Removing finalizers from Job"
    #     kubectl patch job ${NAMESPACE}-job-tarshot -n ${NAMESPACE} --type=json -p '[{"op": "remove", "path": "/metadata/finalizers"}]' && log "Finalizers removed from Job"
    #     sleep 1
    #     log "Deleting Job $job_name"
    #     kubectl delete job "$job_name" -n "$namespace" --ignore-not-found && log "Job $job_name deleted"
    #   else
    #     log "Job $job_name not found"
    #   fi
    # }

    # delete_assets() {
    #   local msg=${1:-"Deleting ephemeral assets"}
    #   log "$msg"
    #   delete_job "${NAMESPACE}-job-tarshot" "$NAMESPACE"
    #   delete_pvc "${NAMESPACE}-pvc-tarshot" "$NAMESPACE"
    #   delete_volumesnapshot "${NAMESPACE}-volumesnapshot-tarshot" "$NAMESPACE"
    #   log "Ephemeral assets have been deleted"
    # }

    # apply_asset() {
    #   local resource_type=$1
    #   local resource_name=$2
    #   local namespace=$3
    #   local condition_field=$4
    #   local condition_value=$5
    #   local yaml_file=$6

    #   log "Applying $resource_type configuration" && kubectl apply -f "$yaml_file"
      
    #   while [ "$(kubectl get "$resource_type" "$resource_name" -n "$namespace" -o jsonpath="{.status.$condition_field}")" != "$condition_value" ]; do
    #     log "Waiting for the $resource_type $resource_name to be $condition_value..."
    #     sleep 10
    #   done
    # }

    # apply_assets() {
    #   log "Starting backup job"
    #   apply_asset "volumesnapshot" "${NAMESPACE}-volumesnapshot-tarshot" "$NAMESPACE" "readyToUse" "true" "/scripts/${NAMESPACE}-volumesnapshot-tarshot.yaml"
    #   apply_asset "pvc" "${NAMESPACE}-pvc-tarshot" "$NAMESPACE" "phase" "Bound" "/scripts/${NAMESPACE}-pvc-tarshot.yaml"
    #   apply_asset "job" "${NAMESPACE}-job-tarshot" "$NAMESPACE" "succeeded" "1" "/scripts/${NAMESPACE}-job-tarshot.yaml"
    #   log "Backup job completed"
    # }

    # delete_assets "Purging orphan assets (if they exist)"
    # apply_assets
    # delete_assets "Deleting ephemeral assets"
